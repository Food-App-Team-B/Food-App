import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecipeAppGUI extends JFrame {
    private JComboBox<String> dietRestrictions;
    private List<JCheckBox> allergyCheckboxes;
    private List<String> restrictedFoods;
    private Map<String, List<String>> dietFoodRestrictions;
    private Map<String, String> allergyFoodMappings;

    public RecipeAppGUI() {
        setTitle("Recipe App");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center the window on the screen

        // Create components
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(new Color(255, 165, 0)); // Orange color

        JPanel contentPanel = new JPanel(new BorderLayout());
        mainPanel.add(contentPanel, BorderLayout.CENTER);

        JTextArea recipeTextArea = new JTextArea();
        recipeTextArea.setEditable(false);
        recipeTextArea.setForeground(Color.BLACK); // Set text color
        recipeTextArea.setLineWrap(true); // Enable text wrapping
        recipeTextArea.setWrapStyleWord(true); // Wrap at word boundaries
        JScrollPane scrollPane = new JScrollPane(recipeTextArea);
        contentPanel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new GridLayout(3, 2, 10, 10)); // 3x2 grid layout for buttons
        buttonPanel.setBackground(new Color(30, 144, 255)); // Dodger Blue color

        JButton cookbookButton = new JButton("Cookbook");
        JButton ingredientsButton = new JButton("Ingredients");
        JButton recommendButton = new JButton("Recommend Something");
        JButton searchButton = new JButton("Search");
        JButton cleanButton = new JButton("Clean Pantry");
        JButton prefButton = new JButton("Preferences");

        // Customize button colors and fonts
        Font buttonFont = new Font("Arial", Font.PLAIN, 18);
        cookbookButton.setFont(buttonFont);
        ingredientsButton.setFont(buttonFont);
        recommendButton.setFont(buttonFont);
        searchButton.setFont(buttonFont);
        cleanButton.setFont(buttonFont);
        prefButton.setFont(buttonFont);

        // Add buttons to the panel
        buttonPanel.add(cookbookButton);
        buttonPanel.add(ingredientsButton);
        buttonPanel.add(recommendButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(cleanButton);
        buttonPanel.add(prefButton);

        contentPanel.add(buttonPanel, BorderLayout.SOUTH);

        // Add some placeholder text to the recipe text area
        recipeTextArea.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit. " +
                "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. " +
                "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.");

        add(mainPanel);
        setVisible(true);

        // Add action listener for cleanButton
        cleanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int option = JOptionPane.showConfirmDialog(RecipeAppGUI.this, "Are you sure? This cannot be undone.", "Clean Pantry", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    // Perform clean action
                    JOptionPane.showMessageDialog(RecipeAppGUI.this, "Pantry cleaned successfully.");
                }
            }
        });

        // Add action listener for prefButton
        prefButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Create and display the Preferences dialog
                JDialog preferencesDialog = createPreferencesDialog();
                preferencesDialog.setVisible(true);
            }
        });

        // Initialize data for preferences
        initializePreferencesData();
    }

    private void initializePreferencesData() {
        restrictedFoods = new ArrayList<>();
        dietFoodRestrictions = new HashMap<>();
        allergyFoodMappings = new HashMap<>();

        // Initialize diet restrictions
        String[] diets = {"None", "Vegetarian", "Vegan", "Keto", "Paleo"};
        for (String diet : diets) {
            dietFoodRestrictions.put(diet, new ArrayList<>());
        }

        // Initialize allergy mappings
        String[] allergies = {"Nuts", "Dairy", "Gluten", "Eggs", "Seafood"};
        for (String allergy : allergies) {
            allergyFoodMappings.put(allergy, allergy);
        }
    }

    private JDialog createPreferencesDialog() {
        JDialog preferencesDialog = new JDialog(this, "Preferences", true);
        preferencesDialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        preferencesDialog.setLayout(new BoxLayout(preferencesDialog.getContentPane(), BoxLayout.Y_AXIS));

        JPanel allergiesPanel = new JPanel(new GridLayout(0, 2, 10, 10));
        allergiesPanel.setBorder(BorderFactory.createTitledBorder("Allergies"));
        allergyCheckboxes = new ArrayList<>();
        String[] allergies = {"Nuts", "Dairy", "Gluten", "Eggs", "Seafood"};
        for (String allergy : allergies) {
            JCheckBox checkBox = new JCheckBox(allergy);
            checkBox.addActionListener(e -> updateRestrictedFoodsBasedOnAllergies());
            allergyCheckboxes.add(checkBox);
            allergiesPanel.add(checkBox);
        }
        preferencesDialog.add(allergiesPanel);

        JPanel dietPanel = new JPanel();
        dietPanel.setBorder(BorderFactory.createTitledBorder("Diet Restrictions"));
        String[] diets = {"None", "Vegetarian", "Vegan", "Keto", "Paleo"};
        dietRestrictions = new JComboBox<>(diets);
        dietPanel.add(dietRestrictions);
        preferencesDialog.add(dietPanel);

        // Add action listener to diet restrictions combo box
        dietRestrictions.addActionListener(e -> updateRestrictedFoodsBasedOnDiet((String) dietRestrictions.getSelectedItem()));

        // Layout and display adjustments
        alignComponents(preferencesDialog.getContentPane());
        preferencesDialog.pack(); // Adjusts the size of the frame to fit its contents
        preferencesDialog.setLocationRelativeTo(this); // Center the dialog relative to the main frame

        return preferencesDialog;
    }

    private void updateRestrictedFoodsBasedOnDiet(String selectedDiet) {
        restrictedFoods.clear();
        restrictedFoods.addAll(dietFoodRestrictions.getOrDefault(selectedDiet, new ArrayList<>()));
        updateRestrictedFoodsBasedOnAllergies();
        System.out.println("Updated Restricted Foods: " + restrictedFoods);
    }

    private void updateRestrictedFoodsBasedOnAllergies() {
        String selectedDiet = (String) dietRestrictions.getSelectedItem();
        restrictedFoods.addAll(dietFoodRestrictions.getOrDefault(selectedDiet, new ArrayList<>()));
        for (JCheckBox checkBox : allergyCheckboxes) {
            if (checkBox.isSelected()) {
                String food = allergyFoodMappings.get(checkBox.getText());
                if (!restrictedFoods.contains(food)) {
                    restrictedFoods.add(food);
                }
            }
        }
        System.out.println("Updated Restricted Foods: " + restrictedFoods);
    }

    private void alignComponents(Container container) {
        for (Component comp : container.getComponents()) {
            if (comp instanceof JComponent) {
                ((JComponent) comp).setAlignmentX(Component.LEFT_ALIGNMENT);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new RecipeAppGUI());
    }
}
